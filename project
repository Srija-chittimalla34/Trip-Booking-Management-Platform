/*
==================================================================================
Travel Booking System (TBS) Project
==================================================================================

Project Overview: Travel Booking System
---------------------------------------
A. Database Design
    -- Database Name: TravelDB

B. Tables:
    -- Customers: Stores traveler details.
    -- Trips: Stores trip packages.
    -- Bookings: Stores booking details.
    -- Payments: Stores payment records.
    -- Destinations: Stores popular destinations.

C. Insert Sample Data:
    -- Populate each table with sample data.

D. Write Queries:
    -- Retrieve data (customers, bookings, trips, payments).
    -- Aggregations (total revenue, trips booked per customer, upcoming trips).
    -- Join tables for comprehensive reports.
    -- Use subqueries and CTEs for analysis.
*/

/* LET'S GET STARTED */

-- Create the database
CREATE DATABASE TravelDB;
GO

-- Use the database
USE TravelDB;
GO

-- Create the Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Age INT,
    Gender NVARCHAR(10),
    Email NVARCHAR(100),
    ContactNumber NVARCHAR(15),
    City NVARCHAR(50),
    Country NVARCHAR(50),
    CreatedAt DATETIME DEFAULT GETDATE()
);

-- Create the Destinations table
CREATE TABLE Destinations (
    DestinationID INT PRIMARY KEY IDENTITY(1,1),
    DestinationName NVARCHAR(100),
    Country NVARCHAR(50),
    PopularityScore INT
);

-- Create the Trips table
CREATE TABLE Trips (
    TripID INT PRIMARY KEY IDENTITY(1,1),
    TripName NVARCHAR(100),
    DestinationID INT,
    StartDate DATE,
    EndDate DATE,
    Price DECIMAL(10,2),
    SeatsAvailable INT,
    FOREIGN KEY (DestinationID) REFERENCES Destinations(DestinationID)
);

-- Create the Bookings table
CREATE TABLE Bookings (
    BookingID INT PRIMARY KEY IDENTITY(1,1),
    CustomerID INT,
    TripID INT,
    BookingDate DATE,
    SeatsBooked INT,
    Status NVARCHAR(20) DEFAULT 'Confirmed',
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (TripID) REFERENCES Trips(TripID)
);

-- Create the Payments table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT,
    PaymentDate DATE,
    Amount DECIMAL(10,2),
    PaymentMode NVARCHAR(50),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID)
);

-- Insert sample data into Destinations
INSERT INTO Destinations(DestinationName, Country, PopularityScore)
VALUES
('Paris', 'France', 95),
('Tokyo', 'Japan', 90),
('New York', 'USA', 85),
('Sydney', 'Australia', 80),
('Cape Town', 'South Africa', 75);

-- Insert sample data into Trips
INSERT INTO Trips(TripName, DestinationID, StartDate, EndDate, Price, SeatsAvailable)
VALUES
('Romantic Paris Getaway', 1, '2025-12-01', '2025-12-07', 1500, 20),
('Tokyo Cultural Tour', 2, '2025-11-10', '2025-11-20', 2000, 15),
('NYC City Highlights', 3, '2025-10-05', '2025-10-12', 1200, 25),
('Sydney Adventure', 4, '2025-12-15', '2025-12-22', 1800, 10),
('Cape Town Safari', 5, '2025-09-30', '2025-10-07', 2200, 8);

-- Insert sample data into Customers
INSERT INTO Customers(FirstName, LastName, Age, Gender, Email, ContactNumber, City, Country)
VALUES
('John', 'Doe', 30, 'Male', 'john.doe@example.com', '9876543211', 'New York', 'USA'),
('Jane', 'Smith', 28, 'Female', 'jane.smith@example.com', '9876543212', 'Los Angeles', 'USA'),
('Michael', 'Johnson', 35, 'Male', 'michael.j@example.com', '9876543213', 'Chicago', 'USA'),
('Emily', 'Davis', 32, 'Female', 'emily.d@example.com', '9876543214', 'Houston', 'USA'),
('William', 'Brown', 40, 'Male', 'will.b@example.com', '9876543215', 'Boston', 'USA');

-- Insert sample data into Bookings
INSERT INTO Bookings(CustomerID, TripID, BookingDate, SeatsBooked)
VALUES
(1, 1, '2025-09-20', 2),
(2, 2, '2025-09-22', 1),
(3, 3, '2025-09-23', 3),
(4, 4, '2025-09-24', 1),
(5, 5, '2025-09-25', 2);

-- Insert sample data into Payments
INSERT INTO Payments(BookingID, PaymentDate, Amount, PaymentMode)
VALUES
(1, '2025-09-20', 3000, 'Credit Card'),
(2, '2025-09-22', 2000, 'PayPal'),
(3, '2025-09-23', 3600, 'Debit Card'),
(4, '2025-09-24', 1800, 'Credit Card'),
(5, '2025-09-25', 4400, 'UPI');

-- Example Queries
-- Query 1: List all customers
SELECT * FROM Customers;

-- Query 2: List all bookings with customer and trip details
SELECT b.BookingID, c.FirstName + ' ' + c.LastName AS CustomerName,
       t.TripName, d.DestinationName, b.BookingDate, b.SeatsBooked, b.Status
FROM Bookings b
JOIN Customers c ON b.CustomerID = c.CustomerID
JOIN Trips t ON b.TripID = t.TripID
JOIN Destinations d ON t.DestinationID = d.DestinationID;

-- Query 3: Total revenue generated by each trip
SELECT t.TripID, t.TripName, SUM(p.Amount) AS TotalRevenue
FROM Payments p
JOIN Bookings b ON p.BookingID = b.BookingID
JOIN Trips t ON b.TripID = t.TripID
GROUP BY t.TripID, t.TripName;

-- Query 4: Upcoming trips in next 30 days
SELECT * FROM Trips
WHERE StartDate BETWEEN GETDATE() AND DATEADD(DAY, 30, GETDATE());

-- Query 5: Customers with more than one booking
SELECT c.CustomerID, c.FirstName + ' ' + c.LastName AS CustomerName, COUNT(b.BookingID) AS BookingCount
FROM Bookings b
JOIN Customers c ON b.CustomerID = c.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName
HAVING COUNT(b.BookingID) > 1;

-- Stored Procedure Example: Add Booking
CREATE PROCEDURE AddBooking
    @CustomerID INT,
    @TripID INT,
    @BookingDate DATE,
    @SeatsBooked INT
AS
BEGIN
    INSERT INTO Bookings(CustomerID, TripID, BookingDate, SeatsBooked)
    VALUES(@CustomerID, @TripID, @BookingDate, @SeatsBooked);
END;

-- Trigger Example: Update SeatsAvailable after booking
CREATE TRIGGER trg_UpdateSeatsAvailable
ON Bookings
AFTER INSERT
AS
BEGIN
    UPDATE t
    SET t.SeatsAvailable = t.SeatsAvailable - i.SeatsBooked
    FROM Trips t
    JOIN inserted i ON t.TripID = i.TripID;
END;

-- View Example: Customers and their bookings with payments
CREATE VIEW vw_CustomerBookings AS
SELECT c.CustomerID, c.FirstName, c.LastName, t.TripName, d.DestinationName,
       b.BookingDate, b.SeatsBooked, p.Amount, p.PaymentMode
FROM Bookings b
JOIN Customers c ON b.CustomerID = c.CustomerID
JOIN Trips t ON b.TripID = t.TripID
JOIN Destinations d ON t.DestinationID = d.DestinationID
JOIN Payments p ON b.BookingID = p.BookingID;

-- Index Example: Speed up queries on TripID in Bookings
CREATE NONCLUSTERED INDEX IDX_Bookings_TripID ON Bookings(TripID);

-- Security / RBAC Example
-- Create login
CREATE LOGIN TravelUser WITH PASSWORD = 'StrongPassword123';
USE TravelDB;
GO
-- Create user
CREATE USER TravelUser FOR LOGIN TravelUser;
-- Create role
CREATE ROLE BookingAgentRole;
-- Grant permissions
GRANT SELECT, INSERT ON Customers TO BookingAgentRole;
GRANT SELECT, INSERT ON Bookings TO BookingAgentRole;
-- Add user to role
EXEC sp_addrolemember 'BookingAgentRole', 'TravelUser';
